name: Build Multi-Architecture Binaries

# 触发条件：推送到主分支、标签推送、手动触发
on:
  push:
    branches: [ main, master ]
    tags: [ '*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          # AMD64 微架构变体
          - goos: linux
            goarch: amd64
            goamd64: v1
            name: go-mmproxy-linux-amd64-v1
          - goos: linux
            goarch: amd64
            goamd64: v2
            name: go-mmproxy-linux-amd64-v2
          - goos: linux
            goarch: amd64
            goamd64: v3
            name: go-mmproxy-linux-amd64-v3
          - goos: linux
            goarch: amd64
            goamd64: v4
            name: go-mmproxy-linux-amd64-v4
          
          # ARM 架构变体
          - goos: linux
            goarch: arm64
            name: go-mmproxy-linux-arm64
          - goos: linux
            goarch: arm
            goarm: 5
            name: go-mmproxy-linux-armv5
          - goos: linux
            goarch: arm
            goarm: 6
            name: go-mmproxy-linux-armv6
          - goos: linux
            goarch: arm
            goarm: 7
            name: go-mmproxy-linux-armv7
          
          # 其他架构
          - goos: linux
            goarch: 386
            name: go-mmproxy-linux-386
          - goos: linux
            goarch: ppc64
            name: go-mmproxy-linux-ppc64
          - goos: linux
            goarch: ppc64le
            name: go-mmproxy-linux-ppc64le
          - goos: linux
            goarch: mips
            name: go-mmproxy-linux-mips
          - goos: linux
            goarch: mipsle
            name: go-mmproxy-linux-mipsle
          - goos: linux
            goarch: mips64
            name: go-mmproxy-linux-mips64
          - goos: linux
            goarch: mips64le
            name: go-mmproxy-linux-mips64le
          - goos: linux
            goarch: riscv64
            name: go-mmproxy-linux-riscv64
          - goos: linux
            goarch: s390x
            name: go-mmproxy-linux-s390x
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史以便 git describe 工作
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'  # 使用较新的 Go 版本以支持所有架构
    
    - name: Get version and build info
      id: version
      run: |
        # 获取版本信息
        VERSION=$(git describe --tags 2>/dev/null || echo "unknown")
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
        
        echo "Version: $VERSION"
        echo "Build Date: $BUILD_DATE"
    
    - name: Create build directory
      run: mkdir -p build
    
    - name: Build binary
      env:
        CGO_ENABLED: 0
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOAMD64: ${{ matrix.goamd64 }}
        GOARM: ${{ matrix.goarm }}
      run: |
        # 构建 LDFLAGS
        LDFLAGS="-s -w -X main.version=${{ steps.version.outputs.version }} -X main.buildDate=${{ steps.version.outputs.build_date }}"
        
        echo "Building ${{ matrix.goos }}/${{ matrix.goarch }} -> ${{ matrix.name }}"
        
        # 显示环境变量（调试用）
        echo "GOOS: $GOOS"
        echo "GOARCH: $GOARCH"
        if [ -n "$GOAMD64" ]; then echo "GOAMD64: $GOAMD64"; fi
        if [ -n "$GOARM" ]; then echo "GOARM: $GOARM"; fi
        
        # 执行构建
        go build -ldflags="$LDFLAGS" -o "build/${{ matrix.name }}"
        
        # 验证文件是否创建成功
        if [ -f "build/${{ matrix.name }}" ]; then
          echo "✅ Successfully built ${{ matrix.name }}"
          ls -la "build/${{ matrix.name }}"
        else
          echo "❌ Failed to build ${{ matrix.name }}"
          exit 1
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.name }}
        path: build/${{ matrix.name }}
        retention-days: 30
  
  # 汇总所有构建结果
  collect-artifacts:
    name: Collect All Artifacts
    runs-on: ubuntu-latest
    needs: build
    if: always() && needs.build.result == 'success'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Organize artifacts
      run: |
        mkdir -p build
        find artifacts -name 'go-mmproxy-*' -type f -exec cp {} build/ \;
        
        echo "📦 构建完成的文件列表:"
        ls -la build/
        
        echo ""
        echo "📋 各版本说明:"
        echo "- amd64-v1: 兼容所有 x86-64 CPU (最基本指令集)"
        echo "- amd64-v2: 需要 SSE4.2, POPCNT 等指令 (2009年后CPU)"
        echo "- amd64-v3: 需要 AVX, AVX2, BMI1, BMI2 等指令 (2013年后CPU)"
        echo "- amd64-v4: 需要 AVX512F, AVX512BW, AVX512VL 等指令 (较新CPU)"
        echo ""
        echo "🏗️ 其他架构: arm64, armv5/6/7, 386, ppc64(le), mips(le), riscv64, s390x"
    
    - name: Upload combined artifacts
      uses: actions/upload-artifact@v3
      with:
        name: go-mmproxy-all-binaries
        path: build/
        retention-days: 90
  
  # 如果是标签推送，创建 GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: collect-artifacts
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all binaries
      uses: actions/download-artifact@v3
      with:
        name: go-mmproxy-all-binaries
        path: build
    

    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ github.ref_name }}
        files: |
          build/*
        body: |
          Latest build for the current [commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}